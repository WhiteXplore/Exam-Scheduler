import { Repository } from 'typeorm';
import { CreateEntryRoomDto } from './dto/create-entry-room.dto';
import { CreateEntryClassDto } from './dto/create-entry-class.dto';
import { CreateEntrySubjectDto } from './dto/create-entry-subject.dto';
import { CreateEntryTeacherDto } from './dto/create-entry-teacher,dto';
import { CreateEntryInstitutesDto } from './dto/create-entry-institutes.dto';
import { CreateEntryYearDto } from './dto/create-entry-year.dto';
import { CreateEntrySetDto } from './dto/create-entry-set.dto';
import { CreateEntryDayDto } from './dto/create-entry-day.dto';
import { EntryClass } from 'src/entities/entry-class.entity';
import { EntryRoom } from 'src/entities/entry-room.entity';
import { EntrySubject } from 'src/entities/entry-subject.entity';
import { EntryTeacher } from 'src/entities/entry-teacher.entity';
import { EntryInstitutes } from 'src/entities/entry-institutes.entity';
import { EntryYear } from 'src/entities/entry-year.entity';
import { EntrySet } from 'src/entities/entry-set.entity';
import { EntryDay } from 'src/entities/entry-day.entity';
import { EntryTeacherLoad } from 'src/entities/entry_teacher_load.entity';
export declare class EntryService {
    private readonly classRepository;
    private readonly roomRepository;
    private readonly subjectRepository;
    private readonly teacherRepository;
    private readonly institutesRepository;
    private readonly yearRepository;
    private readonly setRepository;
    private readonly dayRepository;
    private readonly entryTeacherLoadRepository;
    constructor(classRepository: Repository<EntryClass>, roomRepository: Repository<EntryRoom>, subjectRepository: Repository<EntrySubject>, teacherRepository: Repository<EntryTeacher>, institutesRepository: Repository<EntryInstitutes>, yearRepository: Repository<EntryYear>, setRepository: Repository<EntrySet>, dayRepository: Repository<EntryDay>, entryTeacherLoadRepository: Repository<EntryTeacherLoad>);
    uploadCSV(filePath: string): Promise<void>;
    saveRooms(data: Partial<EntryRoom>[]): Promise<(Partial<EntryRoom> & EntryRoom)[]>;
    createRoom(createEntryRoomDto: CreateEntryRoomDto): Promise<EntryRoom>;
    getAllRooms(): Promise<EntryRoom[]>;
    createClass(createEntryClassDto: CreateEntryClassDto): Promise<EntryClass>;
    getAllClasses(): Promise<EntryClass[]>;
    findOne(id: number): Promise<EntryClass>;
    remove(id: number): Promise<{
        message: string;
    }>;
    createSubject(createSubjectRoomDto: CreateEntrySubjectDto): Promise<EntrySubject>;
    getAllSubject(): Promise<EntrySubject[]>;
    createTeacher(createTeacherDto: CreateEntryTeacherDto): Promise<EntryTeacher>;
    getAllTeachers(): Promise<EntryTeacher[]>;
    createInstitutes(createEntryInstitutesDto: CreateEntryInstitutesDto): Promise<EntryInstitutes>;
    getAllInstitutes(): Promise<EntryInstitutes[]>;
    createYear(createEntryYearDto: CreateEntryYearDto): Promise<EntryYear>;
    getAllYears(): Promise<EntryYear[]>;
    createSet(createEntrySetDto: CreateEntrySetDto): Promise<EntrySet>;
    getAllSets(): Promise<EntrySet[]>;
    createDay(createDayDto: CreateEntryDayDto): Promise<EntryDay>;
    getAllDays(): Promise<EntryDay[]>;
}
